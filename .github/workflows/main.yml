name: Publish Docker image

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  WORKPLACE_APP: ~/app/cms-sown
  DOCKER_REPO: son162001/cms-sown

jobs:
  build:
    name: Build and Push Docker images
    runs-on: ubuntu-latest
    environment: develop
    outputs:
      tag: ${{ steps.declare-vars.outputs.TAG }}
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Declare some variables
        shell: bash
        id : declare-vars
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_ENV"
          echo "tag=$(git rev-parse --short "$GITHUB_SHA").$(echo ${GITHUB_REF#refs/heads/})" >> "$GITHUB_ENV"
          echo "TAG=$(git rev-parse --short "$GITHUB_SHA").$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
      
      - name: Another step
        run: |
          echo "Branch: ${{ env.branch }}"
          echo "Sha: ${{ env.sha_short }}"

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REPO }}:${{ env.tag }}

  deploy_develop:
    name: Deploy to develop
    runs-on: ubuntu-latest
    environment: develop
    needs: build
    env:
      TAG: ${{ needs.build.outputs.tag }}
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      
      - name: Create .env file 
        env:
            SECRETS_VARS: ${{ toJson(secrets) }}
            ENV_VARS: ${{ toJson(vars) }}
        run: | 
          echo "Creating .env file from ENV_VARS..."
          echo "$ENV_VARS" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > .env
          echo -e "DOCKER_REGISTRY_IMAGE=${{ env.DOCKER_REPO }}:${{ env.TAG }}" >> .env

      - name: Copy files to remote server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          source: ".env, docker-compose.yml"
          target: ${{ env.WORKPLACE_APP}}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            cd ${{ env.WORKPLACE_APP}}
            docker compose up -d  
            docker ps            
            # clear docker images
            # docker rmi $(docker images | grep '${{ env.DOCKER_REPO }}')